#!/usr/bin/env php
<?php
/**
 * Transforms PHPStan json report file to custom issues report for SonarQube
 */

const SONARQUBE_DEFAULT_EFFORT_MINUTES_NON_IGNORABLE = 15;
const SONARQUBE_DEFAULT_EFFORT_MINUTES_IGNORABLE     = 5;
const SONARQUBE_DEFAULT_END_COLUMN                   = 1;
const SONARQUBE_DEFAULT_START_COLUMN                 = 0;
const SONARQUBE_DEFAULT_LINE                         = 1;
const SONARQUBE_ENGINE_ID                            = 'PHPSTAN';
const SONARQUBE_RULE_ID                              = 'PHPSTAN';
const SONARQUBE_SEVERITY_NON_IGNORABLE               = 'MAJOR';
const SONARQUBE_SEVERITY_IGNORABLE                   = 'MINOR';
const SONARQUBE_TYPE_NON_IGNORABLE                   = 'VULNERABILITY';
const SONARQUBE_TYPE_IGNORABLE                       = 'BUG';
const FILENAME_PATHS_TO_REMOVE                       = ['#^/app/#'];

$reportFilePath = $argv[1];

try {
    $reportData = file_get_contents($reportFilePath);

    if (false === $reportData) {
        throw new Exception('Cannot read file ' . $reportFilePath);
    }

    $decodedData = json_decode($reportData, true);

    if (false === $decodedData) {
        throw new Exception('Cannot decode json content from file ' . $reportFilePath);
    }

    if (!isset($decodedData['files'])) {
        throw new Exception('Wrong PHPStan report format in file ' . $reportFilePath);
    }

    $issues = [];

    foreach ($decodedData['files'] as $fileName => $fileInfo) {
        $fileName = preg_replace(FILENAME_PATHS_TO_REMOVE, '', $fileName);

        $primaryLocation = array_pop($fileInfo['messages']);

        $issue = [
            'engineId'      => SONARQUBE_ENGINE_ID,
            'ruleId'        => SONARQUBE_RULE_ID,
            'type'          => $primaryLocation['ignorable'] ? SONARQUBE_TYPE_IGNORABLE : SONARQUBE_TYPE_NON_IGNORABLE,
            'effortMinutes' => $primaryLocation['ignorable'] ? SONARQUBE_DEFAULT_EFFORT_MINUTES_IGNORABLE : SONARQUBE_DEFAULT_EFFORT_MINUTES_NON_IGNORABLE,
            'severity'      => $primaryLocation['ignorable'] ? SONARQUBE_SEVERITY_IGNORABLE : SONARQUBE_SEVERITY_NON_IGNORABLE,
        ];

        $issue['primaryLocation'] = [
            'message'   => $primaryLocation['message'],
            'filePath'  => $fileName,
            'textRange' => [
                'startLine'   => $primaryLocation['line'] ?? SONARQUBE_DEFAULT_LINE,
                'startColumn' => SONARQUBE_DEFAULT_START_COLUMN,
                'endLine'     => $primaryLocation['line'] ?? SONARQUBE_DEFAULT_LINE,
                'endColumn'   => SONARQUBE_DEFAULT_END_COLUMN,
            ],
        ];

        foreach ($fileInfo['messages'] as $message) {
            $issue['secondaryLocations'][] = [
                'message'   => $message['message'],
                'filePath'  => $fileName,
                'textRange' => [
                    'startLine'   => $message['line'] ?? SONARQUBE_DEFAULT_LINE,
                    'startColumn' => SONARQUBE_DEFAULT_START_COLUMN,
                    'endLine'     => $message['line'] ?? SONARQUBE_DEFAULT_LINE,
                    'endColumn'   => SONARQUBE_DEFAULT_END_COLUMN,
                ],
            ];

            if (!$message['ignorable']) {
                $issue['effortMinutes'] += SONARQUBE_DEFAULT_EFFORT_MINUTES_NON_IGNORABLE;
                $issue['severity']      = SONARQUBE_SEVERITY_NON_IGNORABLE;
                $issue['type']          = SONARQUBE_TYPE_NON_IGNORABLE;

                continue;
            }

            $issue['effortMinutes'] += SONARQUBE_DEFAULT_EFFORT_MINUTES_IGNORABLE;
        }

        $issues[] = $issue;
    }

    $issuesData = json_encode(['issues' => $issues]);
    $bytes      = file_put_contents($reportFilePath, $issuesData);

    if (false === $bytes || $bytes !== strlen($issuesData)) {
        throw new Exception('Cannot write content to file ' . $reportFilePath);
    }

    echo 'PHPStan report has been successfully transformed to SonarQube format.';
    exit(0);
} catch (Throwable $e) {
    echo $e->getMessage();
    exit(1);
}
